str(datos)
summary(datos)
datos$id_sexo <- factor(datos$id_sexo,
levels = c('M', 'F'),
labels = c("hombre", "mujer"))
datos$id_gestud <- factor(datos$id_gestud)
datos$ejer0B <- factor(datos$ejer0B)
datos$ejer1B <- factor(datos$ejer1B)
datos$ejer5B <- factor(datos$ejer5B)
datos$ejer10B <- factor(datos$ejer10B)
datos$ejer0_10 <- factor(datos$ejer0_10)
datos$obesity <- factor(datos$obesity)
str(datos)
summary(datos)
#--------------------------------------*----------------------------------------
#---------------------- Regresion Logística  -----------------------------------
#--------------------------------------*----------------------------------------
train <- datos[1:711,]
test <- datos[712:,]
test <- datos[712:-1,]
test <- datos[712:1067,]
View(datos)
fit <- glm(obesity ~ ., family=binomial(link='logit'), data=train)
summary(it)
summary(fit)
fit <- glm(obesity ~ ejer0B + ejer1B + ejer5B + ejer10B, family=binomial(link='logit'), data=train)
summary(fit)
fit <- glm(obesity ~ ejer0B * ejer1B * ejer5B * ejer10B, family=binomial(link='logit'), data=train)
summary(fit)
View(test)
anova(fit, test="Chisq")
fitted.results <- predict(fit, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
p <- predict(model, newdata=subset(test,select=c(2,3,4,5,6,7,8)), type="response")
p <- predict(fit, newdata=subset(test,select=c(2,3,4,5,6,7,8)), type="response")
pr <- prediction(p, test$Survived)
library(ROCR)
install.packages('ROCR')
library(ROCR)
p <- predict(fit, newdata=subset(test,select=c(2,3,4,5,6,7,8)), type="response")
pr <- prediction(p, test$Survived)
p <- predict(fit, newdata=subset(test,select=c(2,3,4,5,6,7,8)), type="response")
pr <- prediction(p, test$OBESITY)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
pr <- prediction(p, test$OBESITY)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
library(ROCR)
p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
summary(fit)
modelo <- glm(obesity ~ ejer0B + ejer1B + ejer5B + ejer10B, family=binomial(link='logit'), data=train)
summary(modelo)
library(AUC)
install.packages('AUC')
pred <- predict(modelo)   ### Predecir P[Y=1]
Ypred <- ifelse(pred>0.5,1,0)   ### Predecir Y, considerando como punto de corte 0.5
table(y,Ypred)   ### Tabla de observaciones vs. predicciones
table(obesity,Ypred)   ### Tabla de observaciones vs. predicciones
table(datos$obesity,Ypred)   ### Tabla de observaciones vs. predicciones
Ypred
table(train$obesity,Ypred)   ### Tabla de observaciones vs. predicciones
sens <- sensitivity(pred,factor(train$obesity))   ### Calcula la sensibilidad
sens <- sensitivity(pred,factor(train$obesity))   ### Calcula la sensibilidad
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, train, type="response")
pr <- prediction(p, test$obesity)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
#--------------------------------------*----------------------------------------
#---------------------------- Primer Intento -----------------------------------
#--------------------------------------*----------------------------------------
# La variable referencia es A
fit <- glm(obesity ~ ejer0B * ejer1B * ejer5B * ejer10B, family=binomial(link='logit'), data=train)
summary(fit)
anova(fit, test="Chisq")
fitted.results <- predict(fit, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
plot(prf)
modelo <- glm(obesity ~ ejer0B + ejer1B + ejer5B + ejer10B, family=binomial(link='logit'), data=train)
summary(modelo)
anova(modelo, test="Chisq")
fitted.results <- predict(modelo, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(modelo, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc ### Area bajo la curva ROC
plot(prf)
abline(coef = c(0, 1),
col = "red",
lwd = 1)
plot(prf)
abline(coef = c(0, 1),
col = "red",
lwd = 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc ### Area bajo la curva ROC
modelo <- glm(obesity ~ ejer0B + ejer1B + ejer5B + ejer10B, family=binomial(link='logit'), data=train)
summary(modelo)
anova(modelo, test="Chisq")
fitted.results <- predict(modelo, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(modelo, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(coef = c(0, 1),
col = "red",
lwd = 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc ### Area bajo la curva ROC
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(coef = c(0, 1),
col = "red",
lwd = 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc ### Area bajo la curva ROC
rm(list = ls(all.names = TRUE))
gc()
#--------------------------------------*----------------------------------------
#------------------------------- Proyecto 1  -----------------------------------
#--------------------------------------*----------------------------------------
datos <- read.csv("~/GitHub/Proyecto/desarrollo/python/datos_patronesejercicio.csv", header = TRUE)
str(datos) # 1067 observaciones
summary(datos)
# Tratamos a la mayoria de las variables como categoricas/factor
datos$id_sexo <- factor(datos$id_sexo,
levels = c('M', 'F'),
labels = c("hombre", "mujer"))
datos$id_gestud <- factor(datos$id_gestud)
datos$ejer0B <- factor(datos$ejer0B)
datos$ejer1B <- factor(datos$ejer1B)
datos$ejer5B <- factor(datos$ejer5B)
datos$ejer10B <- factor(datos$ejer10B)
datos$ejer0_10 <- factor(datos$ejer0_10)
datos$obesity <- factor(datos$obesity)
str(datos)
summary(datos)
#--------------------------------------*----------------------------------------
#---------------------- Regresion Logística  -----------------------------------
#--------------------------------------*----------------------------------------
# 2/3 para entrenar y 1/3 para pruebas
train <- datos[1:711,]
test <- datos[712:1067,]
#--------------------------------------*----------------------------------------
#---------------------------- Primer Intento -----------------------------------
#----------------------- Modelo con interacciones ------------------------------
#--------------------------------------*----------------------------------------
# La variable referencia es A
fit <- glm(obesity ~ ejer0B * ejer1B * ejer5B * ejer10B, family=binomial(link='logit'), data=train)
summary(fit)
anova(fit, test="Chisq")
fitted.results <- predict(fit, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(coef = c(0, 1),
col = "red",
lwd = 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc ### Area bajo la curva ROC 0.5791799
modelo <- glm(obesity ~ ejer0B + ejer1B + ejer5B + ejer10B, family=binomial(link='logit'), data=train)
summary(modelo)
anova(modelo, test="Chisq")
fitted.results <- predict(modelo, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(modelo, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(coef = c(0, 1),
col = "red",
lwd = 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc ### Area bajo la curva ROC 0.5823613
rm(list = ls(all.names = TRUE))
gc()
#--------------------------------------*----------------------------------------
#------------------------------- Proyecto 1  -----------------------------------
#--------------------------------------*----------------------------------------
datos <- read.csv("~/GitHub/Proyecto/desarrollo/python/datos_patronesejercicio.csv", header = TRUE)
str(datos) # 1067 observaciones
summary(datos)
# Tratamos a la mayoria de las variables como categoricas/factor
datos$id_sexo <- factor(datos$id_sexo,
levels = c('M', 'F'),
labels = c("hombre", "mujer"))
datos$id_gestud <- factor(datos$id_gestud)
datos$ejer0B <- factor(datos$ejer0B)
datos$ejer1B <- factor(datos$ejer1B)
datos$ejer5B <- factor(datos$ejer5B)
datos$ejer10B <- factor(datos$ejer10B)
datos$ejer0_10 <- factor(datos$ejer0_10)
datos$obesity <- factor(datos$obesity)
str(datos)
summary(datos)
#--------------------------------------*----------------------------------------
#---------------------- Regresion Logística  -----------------------------------
#--------------------------------------*----------------------------------------
# 2/3 para entrenar y 1/3 para pruebas
train <- datos[1:711,]
test <- datos[712:1067,]
#--------------------------------------*----------------------------------------
#---------------------------- Primer Intento -----------------------------------
#----------------------- Modelo con interacciones ------------------------------
#--------------------------------------*----------------------------------------
# La variable referencia es A
fit <- glm(obesity ~ ejer0B * ejer1B * ejer5B * ejer10B, family=binomial(link='logit'), data=train)
summary(fit)
anova(fit, test="Chisq")
fitted.results <- predict(fit, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(coef = c(0, 1),
col = "red",
lwd = 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc ### Area bajo la curva ROC 0.5791799
modelo <- glm(obesity ~ ejer0B + ejer1B + ejer5B + ejer10B, family=binomial(link='logit'), data=train)
summary(modelo)
anova(modelo, test="Chisq")
#fitted.results <- predict(modelo, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- predict(modelo, test, type="response")
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(modelo, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(coef = c(0, 1),
col = "red",
lwd = 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc ### Area bajo la curva ROC 0.5823613
plot(prf, title="Curva ROC mod sin interacciones")
plot(prf, main="Curva ROC mod sin interacciones")
plot(prf, main="Curva ROC mod con interacciones")
abline(coef = c(0, 1),
col = "red",
lwd = 1)
modelo <- glm(obesity ~ ejer0B + ejer1B + ejer5B + ejer10B, family=binomial(link='logit'), data=train)
summary(modelo)
anova(modelo, test="Chisq")
#fitted.results <- predict(modelo, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- predict(modelo, test, type="response")
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(modelo, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf, main="Curva ROC mod sin interacciones")
abline(coef = c(0, 1),
col = "red",
lwd = 1)
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf, main="Curva ROC mod con interacciones")
abline(coef = c(0, 1),
col = "red",
lwd = 1)
#--------------------------------------*----------------------------------------
#---------------------------- Primer Intento -----------------------------------
#----------------------- Modelo con interacciones ------------------------------
#--------------------------------------*----------------------------------------
# La variable referencia es A
fit <- glm(obesity ~ ejer0B * ejer1B * ejer5B * ejer10B, family=binomial(link='logit'), data=train)
summary(fit)
anova(fit, test="Chisq")
fitted.results <- predict(fit, newdata = subset(test, select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError))
library(ROCR)
#p <- predict(fit, newdata=subset(test,select=c("ejer0B", "ejer1B", "ejer5B", "ejer10B")), type="response")
p <- predict(fit, test, type="response")
pr <- prediction(p, test$obesity)
pr <- prediction(p, test$obesity)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf, main="Curva ROC mod con interacciones")
abline(coef = c(0, 1),
col = "red",
lwd = 1)
View(datos)
#--------------------------------------*----------------------------------------
#---------------------------- Primer Intento -----------------------------------
#----------------------- Modelo con interacciones ------------------------------
#--------------------------------------*----------------------------------------
# La variable referencia es A
fit <- glm(obesity ~ ejer0B * ejer1B * ejer5B * ejer10B, family=binomial(link='logit'), data=train)
summary(fit)
View(datos)
rm(list = ls(all.names = TRUE))
gc()
#--------------------------------------*----------------------------------------
#------------------------------- Proyecto 1  -----------------------------------
#--------------------------------------*----------------------------------------
datos <- read.csv("~/GitHub/Proyecto/desarrollo/python/datos_patronesejercicio.csv", header = TRUE)
str(datos) # 1067 observaciones
summary(datos)
# Tratamos a la mayoria de las variables como categoricas/factor
datos$id_sexo <- factor(datos$id_sexo,
levels = c('M', 'F'),
labels = c("hombre", "mujer"))
datos$id_gestud <- factor(datos$id_gestud)
datos$ejer_0 <- factor(datos$ejer_0)
datos$ejer_1 <- factor(datos$ejer_1)
datos$ejer_5 <- factor(datos$ejer_5)
datos$ejer_10 <- factor(datos$ejer_10)
datos$ejer0_10 <- factor(datos$ejer0_10)
datos$obesity <- factor(datos$obesity)
str(datos)
summary(datos)
#--------------------------------------*----------------------------------------
#---------------------- Conteos Naive   ----------------------------------------
#--------------------------------------*----------------------------------------
nrow(datos[datos$obesity == 1, ])
nrow(datos[datos$obesity == 0, ])
View(datos)
#--------------------------------------*----------------------------------------
#---------------------- Conteos Naive   ----------------------------------------
#--------------------------------------*----------------------------------------
nrow(datos[datos$obesity == 1 & datos$ejer_0 > "B", ])
#--------------------------------------*----------------------------------------
#---------------------- Conteos Naive   ----------------------------------------
#--------------------------------------*----------------------------------------
nrow(datos[datos$obesity == 1 & datos$ejer_0 == "B", ])
#--------------------------------------*----------------------------------------
#---------------------- Conteos Naive   ----------------------------------------
#--------------------------------------*----------------------------------------
nrow(datos[datos$obesity == 1 & datos$ejer_0 == "M", ])
#--------------------------------------*----------------------------------------
#---------------------- Conteos Naive   ----------------------------------------
#--------------------------------------*----------------------------------------
nrow(datos[datos$ejer_0 == "B", ])
nrow(datos[datos$ejer_1 == "M", ])
nrow(datos[datos$ejer_5 == "M", ])
nrow(datos[datos$ejer_10 == "M", ])
nrow(datos[datos$obesity == 1 & datos$ejer_0 == "B", ])
nrow(datos[datos$obesity == 1 & datos$ejer_0 == "M", ])
nrow(datos[datos$obesity == 1 & datos$ejer_0 == "M", ])
nrow(datos[datos$obesity == 1 & datos$ejer_1 == "M", ])
nrow(datos[datos$obesity == 1 & datos$ejer_5 == "M", ])
nrow(datos[datos$obesity == 1 & datos$ejer_10 == "M", ])
#--------------------------------------*----------------------------------------
#---------------------- Conteos Naive   ----------------------------------------
#--------------------------------------*----------------------------------------
nrow(datos[datos$obesity == 1, ])
nrow(datos[datos$obesity == 0, ])
#--------------------------------------*----------------------------------------
#---------------------- Regresion Logística  -----------------------------------
#--------------------------------------*----------------------------------------
# 2/3 para entrenar y 1/3 para pruebas
train <- datos[1:711,]
test <- datos[712:1067,]
#--------------------------------------*----------------------------------------
#---------------------------- Primer Intento -----------------------------------
#----------------------- Modelo con interacciones ------------------------------
#--------------------------------------*----------------------------------------
# La variable referencia es A
fit <- glm(obesity ~ ejer_0 * ejer_1 * ejer_5 * ejer_10, family=binomial(link='logit'), data=train)
summary(fit)
anova(fit, test="Chisq")
fitted.results <- predict(fit, newdata = subset(test, select=c("ejer_0", "ejer_1", "ejer_5", "ejer_10")), type='response')
fitted.results <- ifelse(fitted.results > 0.5,1,0)
misClasificError <- mean(fitted.results != test$obesity)
print(paste('Accuracy', 1 - misClasificError)) # Accuracy 0.806179775280899
modelo <- glm(obesity ~ ejer_0 + ejer_1 + ejer_5 + ejer_10, family=binomial(link='logit'), data=train)
summary(modelo)
rm(list = ls(all.names = TRUE))
gc()
#--------------------------------------*----------------------------------------
#--------------------------------------*----------------------------------------
#------------------------------- Ejercicio 1 -----------------------------------
#--------------------- Prediccion en el caso continuo --------------------------
#--------------------------------------*----------------------------------------
#--------------------------------------*----------------------------------------
library(faraway)
library(tidyverse)
# Cargamos los datos
help("fat")
#### Filtramos los datos
# todas las variables excepto siri, density y free
datos <- subset(fat, select = -c(siri, density, free))
dim(datos) # 252 observaciones
# quitamos valores extraños de weight
quartiles <- quantile(datos$weight, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(datos$weight)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
datos <- subset(datos, datos$weight > Lower & datos$weight < Upper)
dim(datos) # Outliers de weight eliminados (ahora son 250 observaciones)
# quitamos valores extraños de height
quartiles <- quantile(datos$height, probs=c(.25, .75), na.rm = FALSE)
IQR <- IQR(datos$height)
Lower <- quartiles[1] - 1.5*IQR
Upper <- quartiles[2] + 1.5*IQR
datos <- subset(datos, datos$height > Lower & datos$height < Upper)
dim(datos) # Outliers de height eliminados (ahora son 249 observaciones)
# quitamos valores cero en brozek
datos <- filter(datos, brozek != 0) # Eliminamos ceros de la variable brozek
summary(datos) # Nos quedamos con 248 observaciones de 15 variables
help(glm)
mod1 <- glm(brozek ~ .,
family = gaussian(link = "identity"),
data = datos)
summary(mod1)
mod2 <- glm(brozek ~ .^2,
family = gaussian(link = "identity"),
data = datos)
summary(mod2)
mod3 <- glm(brozek ~ .^2 + I(age^2) + I(weight^2) + I(height^2) +
I(adipos^2) + I(neck^2) + I(chest^2) + I(abdom^2) +
I(hip^2) + I(thigh^2) + I(knee^2) + I(ankle^2) +
I(biceps^2) + I(forearm^2) + I(wrist^2),
family = gaussian(link = "identity"),
data = datos)
summary(mod3)
summary(mod2)
summary(mod1)
summary(mod3)
